var Robroy;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyAuth)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _folder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);






class RobroyAuth {
	static init() {
		if (!window.ROBROY.elements.$authenticateButton) {
			return;
		}
		window.ROBROY.elements.$authenticateButton.addEventListener('click', () => { RobroyAuth.authenticate(); });
		RobroyAuth.handleAuthentication();
	}

	static authenticate() {
		if (_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].isLoggedIn()) {
			RobroyAuth.logout();
		} else {
			RobroyAuth.login();
		}
	}

	static logout() {
		if (window.navigator.userAgent.indexOf('Safari') > -1) {
			// Safari shows the login screen again if we try to make an invalid request.
			RobroyAuth.logoutCallback();
			return;
		}

		const url = [
			window.location.protocol,
			'//log:out@',
			window.location.host,
			`${window.ROBROY.args.apiPath}?type=sessions`,
		].join('');
		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'DELETE',
			url,
			noParse: true,
			callback: () => {
				RobroyAuth.logoutCallback();
			},
			errorCallback: () => {
				RobroyAuth.logoutCallback();
			},
		});
	}

	static logoutCallback() {
		window.localStorage.clear();
		RobroyAuth.handleLogout();
	}

	static login() {
		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'POST',
			url: `${window.ROBROY.args.apiPath}?type=sessions`,
			noParse: true,
			callback: (_response, status) => {
				if (status !== 204) {
					_modal__WEBPACK_IMPORTED_MODULE_3__["default"].show(window.ROBROY.lang.error + window.ROBROY.lang.errorInvalidUsername);
					return;
				}
				window.localStorage.setItem(window.ROBROY.args.localStorageKey, true);
				this.handleLogin();
			},
		});
	}

	static handleAuthentication() {
		if (_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].isLoggedIn()) {
			RobroyAuth.handleLogin();
		} else {
			RobroyAuth.handleLogout();
		}
	}

	static handleLogin() {
		window.ROBROY.elements.$authenticateButton.innerText = window.ROBROY.lang.logOut;

		document.body.classList.add('robroy-is-admin');

		RobroyAuth.addAdminBar();

		_image__WEBPACK_IMPORTED_MODULE_2__["default"].getImages().forEach(($container) => {
			const id = $container.getAttribute('data-path');
			_image__WEBPACK_IMPORTED_MODULE_2__["default"].addAdminControls($container, window.ROBROY.currentImages[id]);
		});

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterLogin');
	}

	static handleLogout() {
		window.ROBROY.elements.$authenticateButton.innerText = window.ROBROY.lang.logIn;

		document.body.classList.remove('robroy-is-admin');

		let $elems = document.querySelectorAll('.robroy-admin');
		$elems.forEach((elem) => {
			elem.remove();
		});

		if (window.ROBROY.args.removePointerEventsOnLogin) {
			$elems = document.querySelectorAll('.robroy-link');
			$elems.forEach(($elem) => {
				$elem.removeAttribute('tabindex');
				$elem.style.pointerEvents = '';
			});
		}

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterLogout');
	}

	static addAdminBar() {
		const $container = document.createElement('div');
		$container.setAttribute('id', 'robroy-admin');
		$container.setAttribute('class', 'robroy-admin');
		window.ROBROY.elements.$container.prepend($container);

		const $div = document.createElement('div');
		$div.setAttribute('class', 'robroy-button-container');
		$div.setAttribute('id', 'robroy-admin-buttons');
		$container.prepend($div);

		const $uploadButton = document.createElement('button');
		$uploadButton.setAttribute('class', 'robroy-button');
		$uploadButton.setAttribute('id', 'robroy-create-image');
		$uploadButton.setAttribute('type', 'button');
		$uploadButton.innerText = window.ROBROY.lang.uploadImage;
		$uploadButton.addEventListener('click', _image__WEBPACK_IMPORTED_MODULE_2__["default"].showCreateForm);
		$div.append($uploadButton);

		const $createButton = document.createElement('button');
		$createButton.setAttribute('class', 'robroy-button robroy-button--secondary');
		$createButton.setAttribute('id', 'robroy-create-folder');
		$createButton.setAttribute('type', 'button');
		$createButton.innerText = window.ROBROY.lang.createFolder;
		$createButton.addEventListener('click', _folder__WEBPACK_IMPORTED_MODULE_1__["default"].showCreateForm);
		$div.append($createButton);

		if (window.ROBROY.currentFolder.id) {
			const $editButton = document.createElement('button');
			$editButton.setAttribute('class', 'robroy-button robroy-button--secondary');
			$editButton.setAttribute('id', 'robroy-edit-folder');
			$editButton.setAttribute('type', 'button');
			$editButton.innerText = window.ROBROY.lang.editFolder;
			$editButton.addEventListener('click', _folder__WEBPACK_IMPORTED_MODULE_1__["default"].showEditForm);
			$div.append($editButton);

			const $deleteButton = document.createElement('button');
			$deleteButton.setAttribute('class', 'robroy-button robroy-button--danger');
			$deleteButton.setAttribute('id', 'robroy-delete-folder');
			$deleteButton.setAttribute('type', 'button');
			$deleteButton.innerText = window.ROBROY.lang.deleteFolder;
			if (!_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].isEmpty()) {
				$deleteButton.style.display = 'none';
			}
			$deleteButton.addEventListener('click', _folder__WEBPACK_IMPORTED_MODULE_1__["default"]["delete"]);
			$div.append($deleteButton);
		}

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].modifier('adminBar', { element: $div });
	}
}


/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyApi)
/* harmony export */ });
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _spinner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);




class RobroyApi {
	static request(args) {
		args = args || {};
		args.method = args.method || 'GET';

		const $spinner = _spinner__WEBPACK_IMPORTED_MODULE_1__["default"].show();
		window.ROBROY.state.numRequestsInProgress += 1;

		const req = new XMLHttpRequest();
		req.onreadystatechange = () => {
			if (req.readyState !== XMLHttpRequest.DONE) {
				return;
			}

			window.ROBROY.state.numRequestsInProgress -= 1;
			if (window.ROBROY.state.numRequestsInProgress <= 0) {
				_spinner__WEBPACK_IMPORTED_MODULE_1__["default"].hide($spinner);
			}

			let response = req.responseText;
			if (!response && (req.status < 200 || req.status > 299)) {
				RobroyApi.error(args, response, req);
				return;
			}

			if (response && !args.noParse) {
				try {
					response = JSON.parse(response);
				} catch (e) {
					RobroyApi.error(args, response, req);
					return;
				}
			}

			if (req.status < 200 || req.status > 299) {
				RobroyApi.error(args, response, req);
				return;
			}

			args.callback(response, req.status);
		};

		let url = args.url;
		if (args.url.endsWith('.json') && _utilities__WEBPACK_IMPORTED_MODULE_2__["default"].isLoggedIn()) {
			url += `?t=${Date.now()}`;
		}
		req.open(args.method, url, true);

		if (args.json) {
			req.setRequestHeader('Content-Type', 'application/json');
			req.send(args.json);
		} else {
			req.send(args.formData);
		}
	}

	static error(args, response, req) {
		if (args.errorCallback) {
			args.errorCallback(response, req.status);
		} else {
			_modal__WEBPACK_IMPORTED_MODULE_0__["default"].show(_utilities__WEBPACK_IMPORTED_MODULE_2__["default"].sprintf(window.ROBROY.lang.error + window.ROBROY.lang.errorStatus, req.status));
		}
	}
}


/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyModal)
/* harmony export */ });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);


class RobroyModal {
	static show(message, args = {}) {
		args.closeButtonText = args.closeButtonText || window.ROBROY.lang.ok;
		args.closeButtonClass = args.closeButtonClass || '';

		const id = `robroy-modal-${new Date().getTime()}`;
		const $container = document.createElement('div');
		$container.setAttribute('id', id);
		$container.setAttribute('class', 'robroy-modal');
		$container.setAttribute('role', 'alert');

		const $innerContainer = document.createElement('div');
		$innerContainer.setAttribute('class', 'robroy-modal-box');
		$container.appendChild($innerContainer);

		if (args.append) {
			$innerContainer.appendChild(message);
		} else {
			const $p = document.createElement('p');
			$p.setAttribute('class', 'robroy-modal-text');
			$p.innerText = message;
			$innerContainer.appendChild($p);
		}

		let $closeButton;
		if (!args.hideClose || args.showCancel) {
			const $optionsContainer = document.createElement('p');
			$optionsContainer.setAttribute('class', 'robroy-modal-options');
			$innerContainer.appendChild($optionsContainer);

			if (!args.hideClose) {
				const callback = (e) => {
					if (_utilities__WEBPACK_IMPORTED_MODULE_0__["default"].propertyExists(args, 'callback')) {
						args.callback(e);
					} else {
						RobroyModal.hide(e);
					}
				};

				$closeButton = document.createElement('button');
				$closeButton.setAttribute('id', 'robroy-modal-close');
				$closeButton.setAttribute('type', 'button');
				$closeButton.setAttribute('class', `robroy-button ${args.closeButtonClass}`.trim());
				$closeButton.setAttribute('data-robroy-modal-close', '');
				if (args.closeButtonAttributes) {
					Object.keys(args.closeButtonAttributes).forEach((property) => {
						$closeButton.setAttribute(property, args.closeButtonAttributes[property]);
					});
				}
				$closeButton.innerText = args.closeButtonText;
				$closeButton.addEventListener('click', callback);
				$optionsContainer.appendChild($closeButton);

				document.addEventListener('keydown', RobroyModal.keydownListener, false);
			}

			if (args.showCancel) {
				const $cancelButton = document.createElement('button');
				$cancelButton.setAttribute('id', 'robroy-modal-cancel');
				$cancelButton.setAttribute('type', 'button');
				$cancelButton.setAttribute('class', 'robroy-button robroy-button--secondary');
				$cancelButton.innerText = window.ROBROY.lang.cancel;
				$cancelButton.addEventListener('click', this.hide);
				$optionsContainer.appendChild($cancelButton);
			}
		}

		document.body.appendChild($container);

		window.ROBROY.activeElement = document.activeElement;
		$container.setAttribute('tabindex', '-1');
		$container.focus();

		_utilities__WEBPACK_IMPORTED_MODULE_0__["default"].modifier('modal', { element: $container });

		return $container;
	}

	static keydownListener(e) {
		if (e.key === 'Escape') {
			RobroyModal.hide();
			document.removeEventListener('keydown', RobroyModal.keydownListener);
		}
	}

	static hide(e) {
		let $target;
		if (e && e.target) {
			$target = e.target;
		} else {
			$target = document.querySelector('[data-robroy-modal-close]');
		}

		const $container = $target.closest('.robroy-modal');
		$container.remove();

		if (window.ROBROY.activeElement) {
			window.ROBROY.activeElement.focus();
			window.ROBROY.activeElement = null;
		}
	}
}


/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyUtilities)
/* harmony export */ });
class RobroyUtilities {
	static addField($container, name, label, type = 'text') {
		const $div = document.createElement('div');
		$div.setAttribute('class', `robroy-field robroy-field--${type}`);
		$div.setAttribute('id', `robroy-field-${name}`);
		$container.appendChild($div);

		const $label = document.createElement('label');
		$label.setAttribute('class', 'robroy-label');
		$label.setAttribute('for', `robroy-input-${name}`);
		$label.innerText = label;
		$div.appendChild($label);

		let $input;
		if (type === 'select') {
			$input = document.createElement('select');
			$input.setAttribute('class', 'robroy-select');
		} else {
			$input = document.createElement('input');
			$input.setAttribute('class', 'robroy-input');
			$input.setAttribute('type', type);
		}
		$input.setAttribute('id', `robroy-input-${name}`);
		$input.setAttribute('name', name);
		$div.appendChild($input);

		return $input;
	}

	static callback(name, args) {
		if (!window.ROBROY.args.callbacks[name]) {
			return;
		}
		window.ROBROY.args.callbacks[name](args);
	}

	static debounce(func, wait, immediate) {
		let timeout;
		return function (...args) { // eslint-disable-line func-names
			const context = this;
			const later = () => {
				timeout = null;
				if (!immediate) {
					func.apply(context, args);
				}
			};
			const callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) {
				func.apply(context, args);
			}
		};
	}

	static isEmpty() {
		const imageListStyle = window.getComputedStyle(window.ROBROY.elements.$imageList);
		const folderListStyle = window.getComputedStyle(window.ROBROY.elements.$folderList);
		return imageListStyle.display === 'none' && folderListStyle.display === 'none';
	}

	static isLoggedIn() {
		return window.localStorage.getItem(window.ROBROY.args.localStorageKey);
	}

	static modifier(name, args) {
		if (!window.ROBROY.args.modifiers[name]) {
			return;
		}
		window.ROBROY.args.modifiers[name](args);
	}

	static propertyExists(object, property) {
		return Object.prototype.hasOwnProperty.call(object, property);
	}

	static setMetaTitle(title) {
		const $title = document.querySelector('title');
		$title.innerText = title + window.ROBROY.args.metaTitleSeparator + $title.innerText;
	}

	static setPageTitle(title) {
		let $span = document.getElementById('robroy-folder-title-text');
		if (!$span) {
			const $title = document.createElement('h1');
			$title.setAttribute('id', 'robroy-folder-title');
			window.ROBROY.elements.$container.prepend($title);

			$span = document.createElement('span');
			$span.setAttribute('id', 'robroy-folder-title-text');
			$title.appendChild($span);

			window.ROBROY.elements.$numImages = document.createElement('small');
			window.ROBROY.elements.$numImages.setAttribute('id', 'robroy-folder-num');
			$title.appendChild(window.ROBROY.elements.$numImages);

			RobroyUtilities.modifier('title', { element: $title, title });
		}
		$span.innerText = title;
	}

	static setNumImages() {
		const label = window.ROBROY.currentNumImages === 1 ? window.ROBROY.lang.singularImageText : window.ROBROY.lang.pluralImageText;
		window.ROBROY.elements.$numImages.innerText = `(${window.ROBROY.currentNumImages.toLocaleString()} ${label})`;
	}

	static sprintf(s, ...args) {
		args.forEach((a) => {
			s = s.replace('%s', a);
		});
		return s;
	}
}


/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroySpinner)
/* harmony export */ });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);


class RobroySpinner {
	static show() {
		let $spinner = document.querySelector('.robroy-spinner');
		if (!$spinner) {
			$spinner = document.createElement('div');
			$spinner.setAttribute('class', 'robroy-spinner');
			$spinner.setAttribute('role', 'alert');
			$spinner.innerText = window.ROBROY.lang.loading;
			document.body.appendChild($spinner);
		}
		$spinner.style.display = '';

		_utilities__WEBPACK_IMPORTED_MODULE_0__["default"].modifier('spinner', { element: $spinner });

		return $spinner;
	}

	static hide($spinner) {
		$spinner.style.display = 'none';
	}
}


/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyFolder)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _toast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);






class RobroyFolder {
	static load() {
		window.ROBROY.state.isLoadingFolder = true;

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			url: window.ROBROY.args.apiFoldersPath,
			callback: (response) => {
				if (response) {
					RobroyFolder.loadFolderCallback(response);
				} else {
					_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
						url: `${window.ROBROY.args.apiPath}?type=folders`,
						callback: (response2) => {
							RobroyFolder.loadFolderCallback(response2);
						},
					});
				}
			},
			errorCallback: () => {
				_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
					url: `${window.ROBROY.args.apiPath}?type=folders`,
					callback: (response) => {
						RobroyFolder.loadFolderCallback(response);
					},
				});
			},
		});
	}

	static loadFolderCallback(response) {
		const urlSearchParams = new URLSearchParams(window.location.search);
		const currentFolderId = urlSearchParams.get('folder') || '';

		window.ROBROY.folders = response.data;

		let folder;
		if (currentFolderId === '') {
			folder = {
				id: '',
				type: 'folders',
				attributes: {
					name: '',
				},
			};
		} else {
			folder = window.ROBROY.folders[currentFolderId];
		}

		if (!folder) {
			_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show(window.ROBROY.lang.error + window.ROBROY.lang.errorFolderDoesNotExist);
			return;
		}

		window.ROBROY.currentFolder = folder;

		if (window.ROBROY.currentFolder.id !== '') {
			RobroyFolder.initBreadcrumb();
		}

		if (folder.attributes.name) {
			_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].setMetaTitle(folder.attributes.name);
		}

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].setPageTitle(folder.attributes.name ? folder.attributes.name : window.ROBROY.lang.home);

		let childFolders;
		if (window.ROBROY.currentFolder.id === '') {
			childFolders = Object.values(window.ROBROY.folders).filter((f) => (!f.id.includes('/')));
		} else {
			const numSlashes = window.ROBROY.currentFolder.id.split('/').length + 1;
			childFolders = Object.values(window.ROBROY.folders).filter((f) => {
				if (!f.id.startsWith(`${window.ROBROY.currentFolder.id}/`)) {
					return false;
				}
				return numSlashes === f.id.split('/').length;
			});
		}
		if (childFolders.length > 0) {
			RobroyFolder.appendItems(childFolders);
		}

		window.ROBROY.state.isLoadingFolder = false;

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterLoadFolder', { folder });
	}

	static url(folder) {
		return `?folder=${folder.id}`;
	}

	static element(data) {
		const $li = document.createElement(window.ROBROY.args.folderItemElement);
		$li.setAttribute('class', 'robroy-folder');
		$li.setAttribute('data-path', data.id);

		const $a = document.createElement('a');
		$a.setAttribute('class', 'robroy-folder-link');
		$a.setAttribute('href', RobroyFolder.url(data));
		$li.appendChild($a);

		if (data.attributes.thumbnail) {
			const $img = document.createElement('img');
			$img.setAttribute('class', 'robroy-folder-img');
			$img.setAttribute('src', data.attributes.thumbnail);
			$a.appendChild($img);
		}

		const $name = document.createElement('div');
		$name.setAttribute('class', 'robroy-folder-name');
		$name.innerText = data.attributes.name;
		$a.appendChild($name);

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].modifier('folderItem', { element: $li, folder: data });

		return $li;
	}

	static showCreateForm() {
		const $form = RobroyFolder.form(window.ROBROY.lang.titleCreateFolder, 'post', RobroyFolder.submitCreateFormCallback);

		const $parentInput = $form.querySelector('#robroy-input-parent');
		if ($parentInput) {
			RobroyFolder.addFolderOptions($parentInput, window.ROBROY.currentFolder.id);
		}

		const $parentField = $form.querySelector('#robroy-field-parent');
		if (Object.keys(window.ROBROY.folders).length <= 0) {
			$parentField.style.display = 'none';
		} else {
			$parentField.style.display = '';
		}

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].modifier('folderCreateForm', { addField: _utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addField, form: $form });

		_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show(
			$form,
			{
				append: true,
				callback: RobroyFolder.submitCreateFormCallback,
				closeButtonAttributes: {
					form: 'robroy-folder-form',
					type: 'submit',
				},
				closeButtonText: window.ROBROY.lang.save,
				showCancel: true,
			}
		);
	}

	static showEditForm() {
		const $form = RobroyFolder.form(
			window.ROBROY.lang.titleEditFolder,
			'put',
			RobroyFolder.submitEditFormCallback,
			window.ROBROY.currentFolder.id
		);

		const $parentInput = $form.querySelector('#robroy-input-parent');
		if ($parentInput) {
			RobroyFolder.addFolderOptions($parentInput, RobroyFolder.getParentId(window.ROBROY.currentFolder.id));
		}

		const $parentField = $form.querySelector('#robroy-field-parent');
		if (Object.keys(window.ROBROY.folders).length <= 0) {
			$parentField.style.display = 'none';
		} else {
			$parentField.style.display = '';
		}

		Object.keys(window.ROBROY.currentFolder.attributes).forEach((key) => {
			const $input = $form.querySelector(`#robroy-input-${key}`);
			if ($input) {
				$input.setAttribute('value', window.ROBROY.currentFolder.attributes[key]);
			}
		});

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].modifier('folderEditForm', { addField: _utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addField, form: $form });

		_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show(
			$form,
			{
				append: true,
				callback: RobroyFolder.submitEditFormCallback,
				closeButtonAttributes: {
					form: 'robroy-folder-form',
					type: 'submit',
				},
				closeButtonText: window.ROBROY.lang.save,
				showCancel: true,
			}
		);
	}

	static form(title, method, callback, id = '') {
		const $form = document.createElement('form');
		let action = `${window.ROBROY.args.apiPath}?type=folders`;
		if (id) {
			action += `&id=${id}`;
		}
		$form.setAttribute('action', action);
		$form.setAttribute('id', 'robroy-folder-form');
		$form.setAttribute('method', method);
		$form.addEventListener('submit', callback);

		const $heading = document.createElement('h2');
		$heading.setAttribute('class', 'robroy-heading');
		$heading.innerText = title;
		$form.appendChild($heading);

		const $container = document.createElement('div');
		$container.setAttribute('class', 'robroy-fields');
		$form.appendChild($container);

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addField($container, 'name', window.ROBROY.lang.fieldFolderName);
		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addField($container, 'parent', window.ROBROY.lang.fieldFolderParent, 'select');
		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addField($container, 'thumbnail', window.ROBROY.lang.fieldFolderThumbnail);

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].modifier('folderForm', { addField: _utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addField, container: $container, form: $form });

		return $form;
	}

	static delete() {
		const id = window.ROBROY.currentFolder.id;
		_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show(
			_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].sprintf(window.ROBROY.lang.confirmDeleteFolder, window.ROBROY.currentFolder.attributes.name),
			{
				closeButtonText: window.ROBROY.lang.delete,
				closeButtonClass: 'robroy-button--danger',
				showCancel: true,
				callback: () => {
					RobroyFolder.deleteCallback(id);
					_modal__WEBPACK_IMPORTED_MODULE_2__["default"].hide();
				},
			}
		);
	}

	static deleteCallback(id) {
		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'DELETE',
			url: `${window.ROBROY.args.apiPath}?type=folders&id=${id}`,
			callback: () => {
				_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterDeleteFolder', { id });

				const parentId = RobroyFolder.getParentId(window.ROBROY.currentFolder.id);
				window.location = window.location.href.replace(
					RobroyFolder.url(window.ROBROY.currentFolder),
					parentId ? RobroyFolder.url(window.ROBROY.folders[parentId]) : ''
				);
			},
		});
	}

	static submitCreateFormCallback(e) {
		e.preventDefault();

		const $form = document.getElementById('robroy-folder-form');
		_errors__WEBPACK_IMPORTED_MODULE_1__["default"].clear($form);

		const $nameInput = document.getElementById('robroy-input-name');
		if (!$nameInput.value) {
			_errors__WEBPACK_IMPORTED_MODULE_1__["default"].add($nameInput, window.ROBROY.lang.validationRequired);
			return;
		}

		const formData = new FormData($form);
		let json = {};
		formData.forEach((value, key) => {
			json[key] = value;
		});
		json = JSON.stringify(json);

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: $form.getAttribute('method'),
			url: $form.getAttribute('action'),
			json,
			callback: (response) => {
				RobroyFolder.createRequestCallback(response);
			},
			errorCallback: (response, status) => {
				_errors__WEBPACK_IMPORTED_MODULE_1__["default"].show(response, status);
			},
		});
	}

	static createRequestCallback(response) {
		_toast__WEBPACK_IMPORTED_MODULE_3__["default"].show(window.ROBROY.lang.createdSuccessfullyFolder, { class: 'robroy-toast--success' });

		const parentId = RobroyFolder.getParentId(response.data.id);
		if ((parentId && parentId === window.ROBROY.currentFolder.id) || (!parentId && !window.ROBROY.currentFolder.id)) {
			RobroyFolder.addToList(response.data);

			const $deleteFolderButton = document.getElementById('robroy-delete-folder');
			if ($deleteFolderButton) {
				$deleteFolderButton.style.display = 'none';
			}
		}

		document.getElementById('robroy-input-name').value = '';

		window.ROBROY.folders[response.data.id] = response.data;

		const $createParentInput = document.getElementById('robroy-input-parent');
		RobroyFolder.addFolderOptions($createParentInput, $createParentInput.value);

		const $parentField = document.getElementById('robroy-field-parent');
		$parentField.style.display = '';

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterCreateFolder', { folder: response.data });
	}

	static submitEditFormCallback(e) {
		e.preventDefault();

		const $form = document.getElementById('robroy-folder-form');
		_errors__WEBPACK_IMPORTED_MODULE_1__["default"].clear($form);

		const $nameInput = document.getElementById('robroy-input-name');
		if (!$nameInput.value) {
			_errors__WEBPACK_IMPORTED_MODULE_1__["default"].add($nameInput, window.ROBROY.lang.validationRequired);
			return;
		}

		const formData = new FormData($form);
		let json = {};
		let oldJson = {};
		formData.forEach((value, key) => {
			json[key] = value;
			if (Object.prototype.hasOwnProperty.call(window.ROBROY.currentFolder.attributes, key)) {
				oldJson[key] = window.ROBROY.currentFolder.attributes[key];
			} else {
				oldJson[key] = '';
			}
		});
		json = JSON.stringify(json);
		oldJson = JSON.stringify(oldJson);

		if (json === oldJson) {
			_toast__WEBPACK_IMPORTED_MODULE_3__["default"].show(window.ROBROY.lang.nothingToSave);
			_modal__WEBPACK_IMPORTED_MODULE_2__["default"].hide(e);
			return;
		}

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: $form.getAttribute('method'),
			url: $form.getAttribute('action'),
			json,
			callback: (response) => {
				RobroyFolder.editRequestCallback(response);
			},
			errorCallback: (response, status) => {
				_errors__WEBPACK_IMPORTED_MODULE_1__["default"].show(response, status);
			},
		});
	}

	static editRequestCallback(response) {
		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterEditFolder', { folder: response.data });

		window.location = window.location.href.replace(
			RobroyFolder.url(window.ROBROY.currentFolder),
			RobroyFolder.url(response.data)
		);
	}

	static appendItems(folders) {
		folders.forEach((folder) => {
			window.ROBROY.elements.$folderList.appendChild(RobroyFolder.element(folder));
		});
	}

	static addToList(item) {
		let i;
		const $li = window.ROBROY.elements.$folderList.children;
		const num = $li.length;
		let $previousItem;
		for (i = 0; i < num; i += 1) {
			if ($li[i].getAttribute('data-path') < item.id) {
				$previousItem = $li[i];
			} else {
				break;
			}
		}

		if ($previousItem) {
			$previousItem.after(RobroyFolder.element(item));
		} else {
			window.ROBROY.elements.$folderList.prepend(RobroyFolder.element(item));
		}
	}

	static getFullName(folder) {
		const output = [folder.attributes.name];
		let parentId = RobroyFolder.getParentId(folder.id);
		while (parentId) {
			if (window.ROBROY.folders[parentId]) {
				folder = window.ROBROY.folders[parentId];
			} else {
				break;
			}
			output.push(folder.attributes.name);
			parentId = RobroyFolder.getParentId(folder.id);
		}
		return output.reverse().join(window.ROBROY.args.folderSeparator);
	}

	static getParentId(id) {
		const i = id.lastIndexOf('/');
		return i === -1 ? '' : id.substr(0, i);
	}

	static getFolders() {
		return document.querySelectorAll(`#robroy-folders > ${window.ROBROY.args.folderItemElement}`);
	}

	static hasFolders() {
		return RobroyFolder.getFolders().length > 0;
	}

	static addFolderOptions(select, selectedValue) {
		select.innerText = '';

		let $option = document.createElement('option');
		$option.setAttribute('value', '');
		select.appendChild($option);

		const folderIds = Object.keys(window.ROBROY.folders).sort();
		let folder;
		folderIds.forEach((folderId) => {
			folder = window.ROBROY.folders[folderId];
			$option = document.createElement('option');
			$option.setAttribute('value', folder.id);
			$option.innerText = RobroyFolder.getFullName(window.ROBROY.folders[folder.id]);
			if (folder.id === selectedValue) {
				$option.setAttribute('selected', 'selected');
			}
			select.appendChild($option);
		});
	}

	static initBreadcrumb() {
		const $ul = document.createElement('ul');
		$ul.setAttribute('class', 'robroy-breadcrumb');
		window.ROBROY.elements.$container.prepend($ul);

		let folder = window.ROBROY.currentFolder;
		do {
			$ul.prepend(this.breadcrumbItem(folder));
			folder = window.ROBROY.folders[RobroyFolder.getParentId(folder.id)];
		} while (folder);

		$ul.prepend(this.breadcrumbItem({ id: '', attributes: { name: window.ROBROY.lang.home } }));

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].modifier('breadcrumbList', { element: $ul, folder: window.ROBROY.currentFolder });
	}

	static breadcrumbItem(folder) {
		const $li = document.createElement('li');
		$li.setAttribute('class', 'robroy-breadcrumb-item');

		if (folder.id === window.ROBROY.currentFolder.id) {
			$li.innerText = folder.attributes.name;
		} else {
			const $a = document.createElement('a');
			$a.setAttribute('class', 'robroy-breadcrumb-link');
			$a.setAttribute('href', folder.id ? RobroyFolder.url(folder) : window.location.pathname);
			$a.innerText = folder.attributes.name;
			$li.prepend($a);
		}

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].modifier('breadcrumbItem', { element: $li, folder });

		return $li;
	}
}


/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyErrors)
/* harmony export */ });
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);



class RobroyErrors {
	static add($input, message) {
		$input.setAttribute('aria-invalid', true);

		const $field = $input.closest('.robroy-field');
		$field.classList.add('robroy-has-error');

		const $span = document.createElement('span');
		$span.setAttribute('class', 'robroy-error');
		$span.setAttribute('id', `robroy-error-${$input.getAttribute('id')}`);
		$span.innerText = message;
		$field.append($span);
	}

	static clear($form) {
		let $elems = $form.querySelectorAll('.robroy-error');
		$elems.forEach(($elem) => {
			$elem.remove();
		});

		$elems = $form.querySelectorAll('.robroy-has-error');
		$elems.forEach(($elem) => {
			$elem.classList.remove('robroy-has-error');
			$elem.removeAttribute('aria-invalid');
		});
	}

	static show(response, status) {
		if (response.errors) {
			const errors = [];
			response.errors.forEach((error) => {
				if (error.pointer) {
					const $input = document.getElementById(`robroy-input-${error.pointer}`);
					if ($input) {
						RobroyErrors.add($input, window.ROBROY.lang.error + error.title);
					} else {
						errors.push(error.title);
					}
				} else {
					errors.push(error.title);
				}
			});
			if (errors.length > 0) {
				_modal__WEBPACK_IMPORTED_MODULE_0__["default"].show(_utilities__WEBPACK_IMPORTED_MODULE_1__["default"].sprintf(window.ROBROY.lang.error + errors.join(' '), status));
			}
		} else {
			_modal__WEBPACK_IMPORTED_MODULE_0__["default"].show(_utilities__WEBPACK_IMPORTED_MODULE_1__["default"].sprintf(window.ROBROY.lang.error + window.ROBROY.lang.errorStatus, status));
		}
	}
}


/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyToast)
/* harmony export */ });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);


class RobroyToast {
	static show(message, args = {}) {
		args.class = args.class || '';
		args.closeButtonClass = args.closeButtonText || '';
		args.closeButtonText = args.closeButtonText || window.ROBROY.lang.close;
		args.duration = args.duration || 3000;

		let $container = document.getElementById('robroy-toast-container');
		if (!$container) {
			$container = document.createElement('div');
			$container.setAttribute('id', 'robroy-toast-container');
			document.getElementById('robroy-admin').append($container);
		}

		const id = `robroy-toast-${new Date().getTime()}`;
		const $div = document.createElement('div');
		$div.setAttribute('class', `robroy-toast ${args.class}`.trim());
		$div.setAttribute('id', id);
		$div.setAttribute('role', 'alert');
		$div.style.animationDuration = `${args.duration}ms`;
		$container.appendChild($div);

		const $p = document.createElement('p');
		$p.setAttribute('class', 'robroy-toast-text');
		$p.innerText = message;
		$div.appendChild($p);

		if (!args.hideClose) {
			const callback = (e) => {
				RobroyToast.hide(e);
			};

			const $closeButton = document.createElement('button');
			$closeButton.setAttribute('class', `robroy-toast-close ${args.closeButtonClass}`.trim());
			$closeButton.setAttribute('type', 'button');
			if (args.closeButtonAttributes) {
				Object.keys(args.closeButtonAttributes).forEach((property) => {
					$closeButton.setAttribute(property, args.closeButtonAttributes[property]);
				});
			}
			$closeButton.innerText = args.closeButtonText;
			$closeButton.addEventListener('click', callback);
			$div.appendChild($closeButton);
		}

		_utilities__WEBPACK_IMPORTED_MODULE_0__["default"].modifier('toast', { element: $div });

		setTimeout(() => {
			$div.remove();
		}, args.duration + 1000);

		return $div;
	}

	static hide(e) {
		e.target.closest('.robroy-toast').remove();
	}
}


/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyImage)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _folder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _toast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4);







class RobroyImage {
	static load() {
		window.ROBROY.state.isLoadingImages = true;

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			url: window.ROBROY.args.apiImagesPath,
			callback: (response) => {
				if (response) {
					RobroyImage.getImagesCallback(response);
				} else {
					_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
						url: `${window.ROBROY.args.apiPath}?type=images`,
						callback: (response2) => {
							RobroyImage.getImagesCallback(response2);
						},
					});
				}
			},
			errorCallback: () => {
				_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
					url: `${window.ROBROY.args.apiPath}?type=images`,
					callback: (response) => {
						RobroyImage.getImagesCallback(response);
					},
				});
			},
		});
	}

	static getImagesCallback(response) {
		const urlSearchParams = new URLSearchParams(window.location.search);
		const currentFolderId = urlSearchParams.get('folder') || '';
		let images = Object.values(response.data);

		if (!window.ROBROY.args.showAllImages) {
			images = images.filter((image) => (image.attributes.folder === currentFolderId));
		}

		images.forEach((image) => {
			window.ROBROY.currentImages[image.id] = image;
		});

		RobroyImage.appendItems(images);
		if (window.ROBROY.grid) {
			window.ROBROY.grid.resizeAllItems();
		}

		window.ROBROY.state.allPagesLoaded = true;

		window.ROBROY.currentNumImages = images.length;

		if (images.length <= 0) {
			if (!_folder__WEBPACK_IMPORTED_MODULE_2__["default"].hasFolders()) {
				const $deleteFolderButton = document.getElementById('robroy-delete-folder');
				if ($deleteFolderButton) {
					$deleteFolderButton.style.display = '';
				}
			}
		} else {
			const $deleteFolderButton = document.getElementById('robroy-delete-folder');
			if ($deleteFolderButton) {
				$deleteFolderButton.style.display = 'none';
			}
		}

		window.ROBROY.state.isLoadingImages = false;

		RobroyImage.onScroll();
		window.addEventListener('scroll', _utilities__WEBPACK_IMPORTED_MODULE_5__["default"].debounce(() => { RobroyImage.onScroll(); }, 100));

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].callback('afterLoadImages', { images });
	}

	static element(data, setSrc = false) {
		const $figure = document.createElement(window.ROBROY.args.imageItemElement);
		$figure.setAttribute('class', 'robroy-figure');
		$figure.setAttribute('data-path', data.id);

		const $a = document.createElement('a');
		$a.setAttribute('class', 'robroy-link');
		$a.setAttribute('href', data.meta.url);
		$figure.appendChild($a);

		const $img = document.createElement('img');
		if (data.attributes.title) {
			$img.setAttribute('alt', data.attributes.title);
		}
		$img.setAttribute('class', 'robroy-img');
		$img.setAttribute('data-src', data.meta.thumbnail);
		$img.setAttribute('height', data.meta.thumbnailHeight);
		$img.setAttribute('width', data.meta.thumbnailWidth);
		$a.appendChild($img);

		if (setSrc) {
			RobroyImage.setSrc($img);

			if (_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].isLoggedIn()) {
				RobroyImage.addAdminControls($figure, data);
			}
		}

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].modifier('imageItem', { element: $figure });

		return $figure;
	}

	static showCreateForm() {
		const $form = document.createElement('form');
		$form.setAttribute('action', `${window.ROBROY.args.apiPath}?type=images`);
		$form.setAttribute('enctype', 'multipart/form-data');
		$form.setAttribute('id', 'robroy-image-form');
		$form.setAttribute('method', 'post');
		$form.addEventListener('submit', RobroyImage.submitCreateFormCallback);

		const $heading = document.createElement('h2');
		$heading.setAttribute('class', 'robroy-heading');
		$heading.innerText = window.ROBROY.lang.uploadImage;
		$form.appendChild($heading);

		const $div = document.createElement('div');
		$div.setAttribute('class', 'robroy-field');
		$div.setAttribute('id', 'robroy-field-upload');
		$form.appendChild($div);

		const $label = document.createElement('label');
		$label.setAttribute('class', 'robroy-label');
		$label.setAttribute('for', 'robroy-input-upload');
		$label.innerText = window.ROBROY.lang.fieldImageImages;
		$div.appendChild($label);

		const $fileContainer = document.createElement('div');
		$fileContainer.setAttribute('class', 'robroy-file-container');
		$div.appendChild($fileContainer);

		const $fileInput = document.createElement('input');
		$fileInput.setAttribute('accept', 'image/*');
		$fileInput.setAttribute('class', 'robroy-file-input');
		$fileInput.setAttribute('id', 'robroy-input-upload');
		$fileInput.setAttribute('name', 'upload[]');
		$fileInput.setAttribute('multiple', 'multiple');
		$fileInput.setAttribute('type', 'file');
		$fileInput.addEventListener('change', RobroyImage.onChange);
		$fileContainer.appendChild($fileInput);

		const $text = document.createElement('div');
		$text.setAttribute('class', 'robroy-file-text');
		$text.setAttribute('id', 'robroy-create-image-text');
		$text.innerText = window.ROBROY.lang.dragImagesOrClickHereToUpload;
		$fileContainer.appendChild($text);

		const $parentInput = document.createElement('input');
		$parentInput.setAttribute('name', 'folder');
		$parentInput.setAttribute('value', window.ROBROY.currentFolder.id);
		$parentInput.setAttribute('type', 'hidden');
		$form.appendChild($parentInput);

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].modifier('imageCreateForm', { addField: _utilities__WEBPACK_IMPORTED_MODULE_5__["default"].addField, form: $form });

		_modal__WEBPACK_IMPORTED_MODULE_3__["default"].show(
			$form,
			{
				append: true,
				callback: RobroyImage.submitCreateFormCallback,
				closeButtonAttributes: {
					form: 'robroy-image-form',
					type: 'submit',
				},
				closeButtonText: window.ROBROY.lang.upload,
				showCancel: true,
			}
		);
	}

	static showEditForm(e) {
		const path = e.target.closest('[data-path]').getAttribute('data-path');
		window.ROBROY.currentImage = window.ROBROY.currentImages[path];

		const $form = document.createElement('form');
		$form.setAttribute('action', `${window.ROBROY.args.apiPath}?type=images&id=${window.ROBROY.currentImage.id}`);
		$form.setAttribute('id', 'robroy-image-form');
		$form.setAttribute('method', 'PUT');
		$form.addEventListener('submit', RobroyImage.submitEditFormCallback);

		const $heading = document.createElement('h2');
		$heading.setAttribute('class', 'robroy-heading');
		$heading.innerText = window.ROBROY.lang.titleEditImage;
		$form.appendChild($heading);

		const $container = document.createElement('div');
		$container.setAttribute('class', 'robroy-fields');
		$form.appendChild($container);

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].addField($container, 'filename', window.ROBROY.lang.fieldImageFilename);

		const $folderInput = _utilities__WEBPACK_IMPORTED_MODULE_5__["default"].addField($container, 'folder', window.ROBROY.lang.fieldImageFolder, 'select');
		_folder__WEBPACK_IMPORTED_MODULE_2__["default"].addFolderOptions($folderInput, window.ROBROY.currentImage.attributes.folder);

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].addField($container, 'title', window.ROBROY.lang.fieldImageTitle);

		Object.keys(window.ROBROY.currentImage.attributes).forEach((key) => {
			const $input = $form.querySelector(`#robroy-input-${key}`);
			if ($input && Object.prototype.hasOwnProperty.call(window.ROBROY.currentImage.attributes, key)) {
				$input.setAttribute('value', window.ROBROY.currentImage.attributes[key]);
			}
		});

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].modifier('imageEditForm', { addField: _utilities__WEBPACK_IMPORTED_MODULE_5__["default"].addField, container: $container, form: $form });

		_modal__WEBPACK_IMPORTED_MODULE_3__["default"].show(
			$form,
			{
				append: true,
				callback: RobroyImage.submitEditFormCallback,
				closeButtonAttributes: {
					form: 'robroy-image-form',
					type: 'submit',
				},
				closeButtonText: window.ROBROY.lang.save,
				showCancel: true,
			}
		);
	}

	static delete(e) {
		const id = e.target.closest('[data-path]').getAttribute('data-path');
		_modal__WEBPACK_IMPORTED_MODULE_3__["default"].show(
			_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].sprintf(window.ROBROY.lang.confirmDeleteImage, id),
			{
				closeButtonText: window.ROBROY.lang.delete,
				closeButtonClass: 'robroy-button--danger',
				showCancel: true,
				callback: () => {
					RobroyImage.deleteCallback(id);
					_modal__WEBPACK_IMPORTED_MODULE_3__["default"].hide();
				},
			}
		);
	}

	static deleteCallback(id) {
		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'DELETE',
			url: `${window.ROBROY.args.apiPath}?type=images&id=${id}`,
			callback: () => {
				_toast__WEBPACK_IMPORTED_MODULE_4__["default"].show(window.ROBROY.lang.deletedSuccessfullyImage, { class: 'robroy-toast--success' });
				RobroyImage.removeImageFromList(id);
				_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].callback('afterDeleteImage', { id });
			},
		});
	}

	static setThumbnail(e) {
		if (e.target.getAttribute('data-current-thumbnail')) {
			RobroyImage.removeThumbnail(e);
		} else {
			RobroyImage.makeThumbnail(e);
		}
	}

	static makeThumbnail(e) {
		const path = e.target.closest('[data-path]').getAttribute('data-path');
		const image = window.ROBROY.currentImages[path];
		const folderId = window.ROBROY.currentFolder.id;
		const json = window.ROBROY.currentFolder.attributes;
		json.thumbnail = image.meta.thumbnail;

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'PUT',
			url: `${window.ROBROY.args.apiPath}?type=folders&id=${folderId}`,
			json: JSON.stringify(json),
			callback: () => {
				_toast__WEBPACK_IMPORTED_MODULE_4__["default"].show(window.ROBROY.lang.updatedSuccessfullyThumbnail, { class: 'robroy-toast--success' });

				const $thumbnailButton = document.querySelector('[data-current-thumbnail]');
				if ($thumbnailButton) {
					$thumbnailButton.innerText = window.ROBROY.lang.makeThumbnail;
					$thumbnailButton.removeAttribute('data-current-thumbnail');
				}

				e.target.innerText = window.ROBROY.lang.removeThumbnail;
				e.target.setAttribute('data-current-thumbnail', true);

				_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].callback('afterMakeThumbnail', { folderId, image });
			},
			errorCallback: () => {
				_toast__WEBPACK_IMPORTED_MODULE_4__["default"].show(window.ROBROY.lang.errorUpdatingThumbnail, { class: 'robroy-toast--error' });
			},
		});
	}

	static removeThumbnail(e) {
		const path = e.target.closest('[data-path]').getAttribute('data-path');
		const image = window.ROBROY.currentImages[path];
		const folderId = window.ROBROY.currentFolder.id;
		const json = window.ROBROY.currentFolder.attributes;
		json.thumbnail = '';

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'PUT',
			url: `${window.ROBROY.args.apiPath}?type=folders&id=${folderId}`,
			json: JSON.stringify(json),
			callback: () => {
				_toast__WEBPACK_IMPORTED_MODULE_4__["default"].show(window.ROBROY.lang.removedSuccessfullyThumbnail, { class: 'robroy-toast--success' });

				e.target.innerText = window.ROBROY.lang.makeThumbnail;
				e.target.removeAttribute('data-current-thumbnail');

				_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].callback('afterRemoveThumbnail', { folderId, image });
			},
			errorCallback: () => {
				_toast__WEBPACK_IMPORTED_MODULE_4__["default"].show(window.ROBROY.lang.errorRemovingThumbnail, { class: 'robroy-toast--error' });
			},
		});
	}

	static submitCreateFormCallback(e) {
		e.preventDefault();

		const $form = document.getElementById('robroy-image-form');
		_errors__WEBPACK_IMPORTED_MODULE_1__["default"].clear($form);

		const $uploadInput = document.getElementById('robroy-input-upload');
		if ($uploadInput.files.length <= 0) {
			_errors__WEBPACK_IMPORTED_MODULE_1__["default"].add($uploadInput, window.ROBROY.lang.validationRequired);
			return;
		}

		const formData = new FormData($form);

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: $form.getAttribute('method'),
			url: $form.getAttribute('action'),
			formData,
			callback: (response) => {
				RobroyImage.createRequestCallback(response);
			},
			errorCallback: (response, status) => {
				_errors__WEBPACK_IMPORTED_MODULE_1__["default"].show(response, status);
			},
		});
	}

	static createRequestCallback(response) {
		_toast__WEBPACK_IMPORTED_MODULE_4__["default"].show(window.ROBROY.lang.createdSuccessfullyImage, { class: 'robroy-toast--success' });

		RobroyImage.prependItems(response.data);

		if (window.ROBROY.grid) {
			window.ROBROY.grid.resizeAllItems();
		}

		response.data.forEach((image) => {
			window.ROBROY.currentImages[image.id] = image;
		});

		window.ROBROY.currentNumImages += response.data.length;
		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].setNumImages();

		document.getElementById('robroy-input-upload').value = '';
		document.getElementById('robroy-create-image-text').innerText = window.ROBROY.lang.dragImagesOrClickHereToUpload;

		const $deleteFolderButton = document.getElementById('robroy-delete-folder');
		if ($deleteFolderButton) {
			$deleteFolderButton.style.display = 'none';
		}

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].callback('afterCreateImage', { image: response.data });
	}

	static submitEditFormCallback(e) {
		e.preventDefault();

		const $form = document.getElementById('robroy-image-form');
		_errors__WEBPACK_IMPORTED_MODULE_1__["default"].clear($form);

		const $filenameInput = document.getElementById('robroy-input-filename');
		if (!$filenameInput.value) {
			_errors__WEBPACK_IMPORTED_MODULE_1__["default"].add($filenameInput, window.ROBROY.lang.validationRequired);
			return;
		}

		const formData = new FormData($form);
		let json = {};
		let oldJson = {};
		formData.forEach((value, key) => {
			json[key] = value;
			if (Object.prototype.hasOwnProperty.call(window.ROBROY.currentImage.attributes, key)) {
				oldJson[key] = window.ROBROY.currentImage.attributes[key];
			} else {
				oldJson[key] = '';
			}
		});
		json = JSON.stringify(json);
		oldJson = JSON.stringify(oldJson);

		if (json === oldJson) {
			_toast__WEBPACK_IMPORTED_MODULE_4__["default"].show(window.ROBROY.lang.nothingToSave);
			_modal__WEBPACK_IMPORTED_MODULE_3__["default"].hide(e);
			return;
		}

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: $form.getAttribute('method'),
			url: $form.getAttribute('action'),
			json,
			callback: (response) => {
				RobroyImage.editRequestCallback(e, response);
			},
			errorCallback: (response, status) => {
				_errors__WEBPACK_IMPORTED_MODULE_1__["default"].show(response, status);
			},
		});
	}

	static editRequestCallback(e, response) {
		_toast__WEBPACK_IMPORTED_MODULE_4__["default"].show(window.ROBROY.lang.updatedSuccessfullyImage, { class: 'robroy-toast--success' });

		const $folderInput = document.getElementById('robroy-input-folder');
		const hasFolderChanged = $folderInput.value !== window.ROBROY.currentImage.attributes.folder;
		if (hasFolderChanged) {
			RobroyImage.removeImageFromList(window.ROBROY.currentImage.id);
		} else {
			RobroyImage.updateImage(window.ROBROY.currentImage.id, response.data);
		}

		delete window.ROBROY.currentImages[window.ROBROY.currentImage.id];
		window.ROBROY.currentImages[response.data.id] = response.data;
		window.ROBROY.currentImage = null;

		_modal__WEBPACK_IMPORTED_MODULE_3__["default"].hide(e);
		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].callback('afterEditImage', { image: response.data });
	}

	static appendItems(images) {
		const elements = images.map((image) => RobroyImage.element(image));
		window.ROBROY.elements.$imageList.append(...elements);
	}

	static prependItems(items) {
		items.forEach((item) => {
			window.ROBROY.elements.$imageList.prepend(RobroyImage.element(item, true));
		});
	}

	static removeImageFromList(id) {
		const $container = document.querySelector(`[data-path="${id}"]`);
		let $nextLink;
		if ($container.nextSibling) {
			$nextLink = $container.nextSibling.querySelector('button');
		}
		if (!$nextLink && $container.previousSibling) {
			$nextLink = $container.previousSibling.querySelector('button');
		}
		$container.remove();

		window.ROBROY.currentNumImages -= 1;
		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].setNumImages();

		if (RobroyImage.hasImages()) {
			if (window.ROBROY.grid) {
				window.ROBROY.grid.resizeAllItems();
			}
			if ($nextLink) {
				$nextLink.focus();
			}
		} else if (!_folder__WEBPACK_IMPORTED_MODULE_2__["default"].hasFolders()) {
			const $deleteFolderButton = document.getElementById('robroy-delete-folder');
			if ($deleteFolderButton) {
				$deleteFolderButton.style.display = '';
			}
		}
	}

	static onChange(e) {
		const files = [...e.target.files];
		const filenames = files.map((file) => file.name);

		document.getElementById('robroy-create-image-text').innerText = filenames.join(', ');
	}

	static updateImage(path, image) {
		const $container = document.querySelector(`[data-path="${path}"]`);
		$container.setAttribute('data-path', image.id);

		const $a = $container.querySelector('.robroy-link');
		$a.setAttribute('href', image.meta.url);

		const $img = $container.querySelector('.robroy-img');
		if (image.attributes.title) {
			$img.setAttribute('alt', image.attributes.title);
		} else {
			$img.removeAttribute('alt');
		}

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].callback('afterUpdateImage', { image, element: $container });
	}

	static view(e) {
		e.target.closest('[data-path]').querySelector('.robroy-link').click();
	}

	static getImages() {
		return document.querySelectorAll(`#robroy-images > ${window.ROBROY.args.imageItemElement}`);
	}

	static hasImages() {
		return RobroyImage.getImages().length > 0;
	}

	static addAdminControls($container, data) {
		if ($container.querySelector('.robroy-admin')) {
			return;
		}

		const $div = document.createElement('div');
		$div.setAttribute('class', 'robroy-admin robroy-button-container');
		$container.appendChild($div);

		const $viewButton = document.createElement('button');
		$viewButton.setAttribute('class', 'robroy-button');
		$viewButton.setAttribute('href', 'button');
		$viewButton.innerText = window.ROBROY.lang.view;
		$viewButton.addEventListener('click', RobroyImage.view);
		$div.appendChild($viewButton);

		const $editButton = document.createElement('button');
		$editButton.setAttribute('class', 'robroy-button robroy-button--secondary');
		$editButton.setAttribute('type', 'button');
		$editButton.innerText = window.ROBROY.lang.edit;
		$editButton.addEventListener('click', RobroyImage.showEditForm);
		$div.appendChild($editButton);

		if (data.attributes.folder) {
			const $thumbnailButton = document.createElement('button');
			$thumbnailButton.setAttribute('class', 'robroy-button robroy-button--secondary');
			$thumbnailButton.setAttribute('href', 'button');
			$thumbnailButton.setAttribute('data-thumbnail-button', true);
			$thumbnailButton.addEventListener('click', RobroyImage.setThumbnail);
			const folder = window.ROBROY.folders[data.attributes.folder];
			if (folder && folder.attributes.thumbnail === data.meta.thumbnail) {
				$thumbnailButton.setAttribute('data-current-thumbnail', true);
				$thumbnailButton.innerText = window.ROBROY.lang.removeThumbnail;
			} else {
				$thumbnailButton.innerText = window.ROBROY.lang.makeThumbnail;
			}
			$div.appendChild($thumbnailButton);
		}

		const $deleteButton = document.createElement('button');
		$deleteButton.setAttribute('class', 'robroy-button robroy-button--danger');
		$deleteButton.setAttribute('type', 'button');
		$deleteButton.innerText = window.ROBROY.lang.delete;
		$deleteButton.addEventListener('click', RobroyImage.delete);
		$div.appendChild($deleteButton);

		if (window.ROBROY.args.removePointerEventsOnLogin) {
			const $link = $container.querySelector('.robroy-link');
			$link.style.pointerEvents = 'none';
			$link.setAttribute('tabindex', -1);
		}
	}

	static onScroll() {
		const $images = document.querySelectorAll('[data-src]');
		const browserHeight = window.innerHeight;
		const offsetFromTopOfPage = window.pageYOffset;
		const buffer = browserHeight;
		const max = offsetFromTopOfPage + browserHeight + buffer;

		$images.forEach(($img) => {
			const topOfImage = $img.getBoundingClientRect().top;
			if (topOfImage <= max) {
				RobroyImage.setSrc($img);
			}
		});
	}

	static setSrc($img) {
		const src = $img.getAttribute('data-src');
		$img.setAttribute('src', src);
		$img.removeAttribute('data-src');

		$img.closest('.robroy-link').style.backgroundImage = `url("${src}")`;

		_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].callback('afterLoadImage', { element: $img });
	}
}


/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyGrid)
/* harmony export */ });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);


class RobroyGrid {
	constructor() {
		window.ROBROY.elements.$imageList.classList.add('robroy-grid');

		this.calculate();

		window.addEventListener('resize', _utilities__WEBPACK_IMPORTED_MODULE_0__["default"].debounce(() => {
			this.calculate();
			this.resizeAllItems();
		}, 100));
	}

	calculate() {
		const gridStyle = window.getComputedStyle(window.ROBROY.elements.$imageList);
		this.gridRowHeight = parseInt(gridStyle.getPropertyValue('grid-auto-rows'), 10);
		this.gridRowGap = parseInt(gridStyle.getPropertyValue('grid-row-gap'), 10);
	}

	checkResizeItem($figure) {
		const $img = $figure.querySelector('img');
		this.resizeItem($figure, $img);
		$img.onload = () => {
			this.resizeItem($figure, $img);
			const $a = $figure.querySelector('a');
			$a.classList.add('robroy-show');
		};
	}

	resizeItem($figure, $img) {
		const itemHeight = $img.getBoundingClientRect().height;
		const rowSpan = Math.ceil((itemHeight + this.gridRowGap) / (this.gridRowHeight + this.gridRowGap));
		$figure.style.gridRowEnd = `span ${rowSpan}`;
	}

	resizeAllItems() {
		const $figures = document.getElementsByClassName('robroy-figure');
		[...$figures].forEach(($figure) => { this.checkResizeItem($figure); });
	}
}


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Robroy)
/* harmony export */ });
/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _grid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _folder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);






class Robroy {
	constructor(args) {
		args = args || {};
		args.apiFoldersPath = args.apiFoldersPath || '/json/folders.json';
		args.apiImagesPath = args.apiImagesPath || '/json/images.json';
		args.apiPath = args.apiPath || '/api.php';
		args.callbacks = args.callbacks || {};
		args.enableGrid = _utilities__WEBPACK_IMPORTED_MODULE_4__["default"].propertyExists(args, 'enableGrid') && args.enableGrid;
		args.folderItemElement = args.folderItemElement || 'li';
		args.folderSeparator = args.folderSeparator || ' > ';
		args.imageItemElement = args.imageItemElement || 'figure';
		args.localStorageKey = args.localStorageKey || 'authenticated';
		args.metaTitleSeparator = args.metaTitleSeparator || ' | ';
		args.modifiers = args.modifiers || {};
		args.pageSize = args.pageSize || 8;
		args.removePointerEventsOnLogin = _utilities__WEBPACK_IMPORTED_MODULE_4__["default"].propertyExists(args, 'removePointerEventsOnLogin') ? args.removePointerEventsOnLogin : true;
		args.selector = args.selector || '#robroy';
		args.showAllImages = args.showAllImages || false;
		this.args = args;

		const $container = document.querySelector(args.selector);
		if (!$container) {
			return;
		}

		const lang = args.lang || {};
		lang.cancel = lang.cancel || 'Cancel';
		lang.close = lang.close || 'Close';
		lang.confirmDeleteFolder = lang.confirmDeleteFolder || 'Are you sure you want to delete the folder "%s"?';
		lang.confirmDeleteImage = lang.confirmDeleteImage || 'Are you sure you want to delete the image "%s"?';
		lang.createdSuccessfullyImage = lang.createdSuccessfullyImage || 'Image uploaded successfully.';
		lang.createdSuccessfullyFolder = lang.createdSuccessfullyFolder || 'Folder created successfully.';
		lang.createFolder = lang.createFolder || 'Create Folder';
		lang.delete = lang.delete || 'Delete';
		lang.deletedSuccessfullyImage = lang.deletedSuccessfullyImage || 'Image deleted successfully.';
		lang.deletedSuccessfullyFolder = lang.deletedSuccessfullyFolder || 'Folder deleted successfully.';
		lang.deleteFolder = lang.deleteFolder || 'Delete Folder';
		lang.dragImagesOrClickHereToUpload = lang.dragImagesOrClickHereToUpload || 'Drag images or click here to upload.';
		lang.edit = lang.edit || 'Edit';
		lang.editFolder = lang.editFolder || 'Edit Folder';
		lang.error = lang.error || 'Error: ';
		lang.errorFolderDoesNotExist = lang.errorFolderDoesNotExist || 'This folder does not exist.';
		lang.errorInvalidUsername = lang.errorInvalidUsername || 'Invalid username or password.';
		lang.errorUpdatingThumbnail = lang.errorUpdatingThumbnail || 'Error updating thumbnail.';
		lang.errorRemovingThumbnail = lang.errorRemovingThumbnail || 'Error removing thumbnail.';
		lang.errorStatus = lang.errorStatus || 'The server returned a %s error.';
		lang.fieldFolderName = lang.fieldFolderName || 'Name';
		lang.fieldFolderParent = lang.fieldFolderParent || 'Parent';
		lang.fieldFolderThumbnail = lang.fieldFolderThumbnail || 'Thumbnail';
		lang.fieldImageImages = lang.fieldImageImages || 'Images';
		lang.fieldImageFilename = lang.fieldImageFilename || 'Filename';
		lang.fieldImageTitle = lang.fieldImageTitle || 'Title';
		lang.fieldImageFolder = lang.fieldImageFolder || 'Folder';
		lang.home = lang.home || 'Home';
		lang.loading = lang.loading || 'Loading...';
		lang.logIn = lang.logIn || 'Log In';
		lang.logOut = lang.logOut || 'Log Out';
		lang.makeThumbnail = lang.makeThumbnail || 'Make Thumbnail';
		lang.nothingToSave = lang.nothingToSave || 'Nothing to save.';
		lang.ok = lang.ok || 'OK';
		lang.pluralImageText = lang.pluralImageText || 'images';
		lang.removeThumbnail = lang.removeThumbnail || 'Remove Thumbnail';
		lang.removedSuccessfullyThumbnail = lang.removedSuccessfullyThumbnail || 'Thumbnail removed successfully.';
		lang.save = lang.save || 'Save';
		lang.singularImageText = lang.singularImageText || 'image';
		lang.submitCreateFolder = lang.submitCreateFolder || 'Create';
		lang.submitEditFolder = lang.submitEditFolder || 'Save';
		lang.titleCreateFolder = lang.titleCreateFolder || 'Create Folder';
		lang.titleEditFolder = lang.titleEditFolder || 'Edit Folder';
		lang.titleEditImage = lang.titleEditImage || 'Edit Image';
		lang.updatedSuccessfullyImage = lang.updatedSuccessfullyImage || 'Image updated successfully.';
		lang.updatedSuccessfullyFolder = lang.updatedSuccessfullyFolder || 'Folder updated successfully.';
		lang.updatedSuccessfullyThumbnail = lang.updatedSuccessfullyThumbnail || 'Thumbnail updated successfully.';
		lang.upload = lang.upload || 'Upload';
		lang.uploadImage = lang.uploadImage || 'Upload Image';
		lang.validationRequired = lang.validationRequired || 'Error: This field is required.';
		lang.view = lang.view || 'View';
		this.lang = lang;

		const $folderList = document.createElement('ul');
		$folderList.setAttribute('id', 'robroy-folders');
		$container.appendChild($folderList);

		const $imageList = document.createElement('div');
		$imageList.setAttribute('id', 'robroy-images');
		$container.appendChild($imageList);

		this.elements = {
			$authenticateButton: document.querySelector('[data-action="authenticate"]'),
			$container,
			$folderList,
			$imageList,
		};
		this.state = {
			isLoadingFolder: false,
			isLoadingImages: false,
			numRequestsInProgress: 0,
		};
		this.currentFolder = null;
		this.currentImage = null;
		this.currentImages = {};
		this.currentNumImages = null;
		this.folders = [];
	}

	static init(args) {
		if (!_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].propertyExists(window, 'ROBROY')) {
			window.ROBROY = new Robroy(args);
			if (!window.ROBROY.elements.$imageList) {
				return null;
			}
			_folder__WEBPACK_IMPORTED_MODULE_2__["default"].load();
			_image__WEBPACK_IMPORTED_MODULE_3__["default"].load();
			if (args.enableGrid) {
				window.ROBROY.grid = new _grid__WEBPACK_IMPORTED_MODULE_1__["default"]();
			}
			let int = setInterval(() => {
				if (!window.ROBROY.state.isLoadingFolder && !window.ROBROY.state.isLoadingImages) {
					_auth__WEBPACK_IMPORTED_MODULE_0__["default"].init();
					_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].setNumImages();
					clearInterval(int);
					int = null;
				}
			}, 250);
		}
		return window.ROBROY;
	}
}

})();

Robroy = __webpack_exports__;
/******/ })()
;