var Robroy;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyGrid)
/* harmony export */ });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


class RobroyGrid {
	constructor() {
		this.calculate();

		window.addEventListener('resize', _utilities__WEBPACK_IMPORTED_MODULE_0__["default"].debounce(() => {
			this.calculate();
			this.resizeAllItems();
		}, 100));
	}

	calculate() {
		var gridStyle = window.getComputedStyle(window.ROBROY.elements.imageList);
		this.gridRowHeight = parseInt(gridStyle.getPropertyValue('grid-auto-rows'), 10);
		this.gridRowGap = parseInt(gridStyle.getPropertyValue('grid-row-gap'), 10);
	}

	checkResizeItem(figure) {
		var img = figure.querySelector('img');
		if (img.complete) {
			this.resizeItem(figure);
		} else {
			var int = setInterval(() => {
				if (!img.complete) {
					return;
				}
				clearInterval(int);
				this.resizeItem(figure);
			}, 100);
		}
	}

	resizeItem(figure) {
		var a = figure.querySelector('a');
		a.style.position = '';
		var itemHeight = a.getBoundingClientRect().height;
		var rowSpan = Math.ceil((itemHeight + this.gridRowGap) / (this.gridRowHeight + this.gridRowGap));
		a.style.position = 'absolute';
		figure.style.gridRowEnd = 'span ' + rowSpan;
	}

	resizeAllItems() {
		var figures = document.getElementsByClassName('robroy-figure');
		[...figures].forEach((figure) => { this.checkResizeItem(figure); });
	}
}


/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyUtilities)
/* harmony export */ });
class RobroyUtilities {
	static addAttributes(elemName, elem) {
		if (!window.ROBROY.args.attributes[elemName]) {
			return;
		}
		Object.keys(window.ROBROY.args.attributes[elemName]).forEach((property) => {
			elem.setAttribute(property, window.ROBROY.args.attributes[elemName][property]);
		});
	}

	static addError(input, message) {
		input.classList.add('robroy-has-error');

		const error = document.createElement('span');
		error.setAttribute('class', 'robroy-error');
		error.setAttribute('id', 'robroy-error-' + input.getAttribute('id'));
		error.innerText = message;
		input.after(error);
	}

	static callback(name) {
		if (!window.ROBROY.args.callbacks[name]) {
			return;
		}
		window.ROBROY.args.callbacks[name]();
	}

	static debounce(func, wait, immediate, ...args) {
		var timeout;
		return function () {
			var context = this;
			var later = function () {
				timeout = null;
				if (!immediate) {
					func.apply(context, args);
				}
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) {
				func.apply(context, args);
			}
		};
	}

	static isLoggedIn() {
		return window.localStorage.getItem('authenticated');
	}

	static propertyExists(object, property) {
		return Object.prototype.hasOwnProperty.call(object, property);
	}

	static setMetaTitle(title) {
		var elem = document.querySelector('title');
		elem.innerText = title + window.ROBROY.args.metaTitleSeparator + elem.innerText;
	}

	static setNumImages() {
		const label = window.ROBROY.currentNumImages === 1 ? window.ROBROY.args.singularImageText : window.ROBROY.args.pluralImageText;
		window.ROBROY.elements.numImages.innerText = window.ROBROY.currentNumImages.toLocaleString() + ' ' + label;
	}
}


/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyList)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _breadcrumb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);
/* harmony import */ var _folder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(10);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2);








class RobroyList {
	static init() {
		RobroyList.loadCurrentFolder();
	}

	static loadCurrentFolder() {
		if (window.ROBROY.args.showAllImages) {
			_auth__WEBPACK_IMPORTED_MODULE_1__["default"].init();

			RobroyList.loadImages(() => { RobroyList.onScroll(); });
			window.addEventListener('scroll', _utilities__WEBPACK_IMPORTED_MODULE_6__["default"].debounce(() => { RobroyList.onScroll(); }, 100));
			return;
		}

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			url: window.ROBROY.args.apiPath + '?type=folders&id=' + window.ROBROY.currentFolderId,
			callback: (response) => {
				window.ROBROY.currentFolder = response.data;

				if (window.ROBROY.currentFolderId !== '') {
					_breadcrumb__WEBPACK_IMPORTED_MODULE_2__["default"].init();
				}

				if (response.data.attributes.name) {
					_utilities__WEBPACK_IMPORTED_MODULE_6__["default"].setMetaTitle(response.data.attributes.name);
				}

				if (response.data.relationships.folders.length > 0) {
					RobroyList.appendFolders(response.data.relationships.folders);
				}

				_auth__WEBPACK_IMPORTED_MODULE_1__["default"].init();

				RobroyList.loadImages(() => { RobroyList.onScroll(); });
				window.addEventListener('scroll', _utilities__WEBPACK_IMPORTED_MODULE_6__["default"].debounce(() => { RobroyList.onScroll(); }, 100));

				_utilities__WEBPACK_IMPORTED_MODULE_6__["default"].callback('afterLoadFolder');
			},
		});
	}

	static loadImages(callback) {
		window.ROBROY.args.isLoadingImages = true;

		var url = [
			window.ROBROY.args.apiPath,
			'?type=images&page[number]=' + (++window.ROBROY.args.pageNumber),
			'&page[size]=' + window.ROBROY.args.pageSize,
		].join('');
		if (!window.ROBROY.args.showAllImages) {
			url += '&parent=' + window.ROBROY.currentFolderId;
		}

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			url: url,
			callback: (response) => {
				response.data.forEach((image) => {
					window.ROBROY.currentImages[image.id] = image;
				});

				RobroyList.appendImages(response.data);
				window.ROBROY.grid.resizeAllItems();

				window.ROBROY.args.isLoadingImages = false;
				if (response.meta.page_number >= response.meta.total_pages) {
					window.ROBROY.args.allPagesLoaded = true;
				}

				if (response.meta.num_items !== window.ROBROY.currentNumImages) {
					window.ROBROY.currentNumImages = response.meta.num_items;
					_utilities__WEBPACK_IMPORTED_MODULE_6__["default"].setNumImages();
				}

				if (response.meta.total_pages <= 0) {
					if (!_empty__WEBPACK_IMPORTED_MODULE_3__["default"].hasFolders()) {
						var $deleteFolder = document.getElementById('robroy-delete-folder');
						if ($deleteFolder) {
							$deleteFolder.style.display = '';
						}
					}
				}

				if (callback) {
					callback();
				}

				_utilities__WEBPACK_IMPORTED_MODULE_6__["default"].callback('afterLoadImage');
			},
		});
	}

	static onScroll() {
		if (window.ROBROY.args.allPagesLoaded || window.ROBROY.args.isLoadingImages) {
			return;
		}

		var lastItem = document.querySelector('#robroy-images > figure:last-of-type');
		if (!lastItem) {
			return;
		}

		var lastItemOffsetFromTop = lastItem.offsetTop;
		var pageOffsetFromTop = window.pageYOffset + window.innerHeight;

		if (pageOffsetFromTop > lastItemOffsetFromTop) {
			RobroyList.loadImages();
		}
	}

	static appendImages(images) {
		images.forEach((image) => {
			window.ROBROY.elements.imageList.appendChild(_image__WEBPACK_IMPORTED_MODULE_5__["default"].element(image));
		});
	}

	static appendFolders(folders) {
		folders.forEach((folder) => {
			window.ROBROY.elements.folderList.appendChild(_folder__WEBPACK_IMPORTED_MODULE_4__["default"].element(folder));
		});
	}
}


/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyApi)
/* harmony export */ });
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _spinner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);



class RobroyApi {
	static request(args) {
		args = args || {};
		args.method = args.method || 'GET';

		_spinner__WEBPACK_IMPORTED_MODULE_1__["default"].show();

		var req = new XMLHttpRequest();
		req.onreadystatechange = () => {
			if (req.readyState !== XMLHttpRequest.DONE) {
				return;
			}

			_spinner__WEBPACK_IMPORTED_MODULE_1__["default"].hide();

			var response = req.responseText;
			if (!response && (req.status < 200 || req.status > 299)) {
				_modal__WEBPACK_IMPORTED_MODULE_0__["default"].show('Error: The server returned a ' + req.status + ' error.');
				return;
			}
			if (response && !args.noParse) {
				try {
					response = JSON.parse(response);
				} catch (e) {
					_modal__WEBPACK_IMPORTED_MODULE_0__["default"].show('Error: The server returned a non-JSON response.');
					return;
				}

				if (response.errors) {
					var errors = response.errors.map((error) => error.title);
					_modal__WEBPACK_IMPORTED_MODULE_0__["default"].show('Error: ' + errors);
					return;
				}
			}

			args.callback(response, req.status);
		};
		req.open(args.method, args.url, true);

		if (args.json) {
			req.setRequestHeader('Content-Type', 'application/json');
			req.send(args.json);
		} else {
			req.send(args.formData);
		}
	}
}


/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyModal)
/* harmony export */ });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);


class RobroyModal {
	static show(message, args) {
		args = args || {};
		args.closeButtonText = args.closeButtonText || 'OK';
		args.closeButtonClass = args.closeButtonClass || '';

		var id = 'robroy-modal-' + (new Date().getTime());
		var container = document.createElement('div');
		container.setAttribute('id', id);
		container.setAttribute('class', 'robroy-modal');
		container.setAttribute('role', 'alert');

		var inner = document.createElement('div');
		inner.setAttribute('class', 'robroy-modal-box');
		container.appendChild(inner);

		var text = document.createElement('p');
		text.setAttribute('class', 'robroy-modal-text');
		if (args.html) {
			text.innerHTML = message;
		} else if (args.append) {
			text.appendChild(message);
		} else {
			text.innerText = message;
		}
		inner.appendChild(text);

		var closeButton;
		if (!args.hideClose || args.showCancel) {
			var optionsParagraph = document.createElement('p');
			optionsParagraph.setAttribute('class', 'robroy-modal-options');
			inner.appendChild(optionsParagraph);

			if (!args.hideClose) {
				var callback = (e) => {
					if (_utilities__WEBPACK_IMPORTED_MODULE_0__["default"].propertyExists(args, 'callback')) {
						args.callback(e);
					} else {
						RobroyModal.hide(e);
					}
				};

				closeButton = document.createElement('button');
				closeButton.setAttribute('id', 'robroy-modal-close');
				closeButton.setAttribute('type', 'button');
				closeButton.setAttribute('class', ('robroy-button ' + args.closeButtonClass).trim());
				closeButton.setAttribute('data-id', id);
				closeButton.setAttribute('data-robroy-modal-close', '');
				if (args.closeButtonAttributes) {
					Object.keys(args.closeButtonAttributes).forEach((property) => {
						closeButton.setAttribute(property, args.closeButtonAttributes[property]);
					});
				}
				closeButton.innerText = args.closeButtonText;
				closeButton.addEventListener('click', callback);
				optionsParagraph.appendChild(closeButton);

				document.addEventListener('keydown', RobroyModal.keydownListener, false);
			}

			if (args.showCancel) {
				var cancelButton = document.createElement('button');
				cancelButton.setAttribute('id', 'robroy-modal-cancel');
				cancelButton.setAttribute('type', 'button');
				cancelButton.setAttribute('class', 'robroy-button robroy-button--secondary');
				cancelButton.setAttribute('data-id', id);
				cancelButton.innerText = 'Cancel';
				cancelButton.addEventListener('click', this.hide);
				optionsParagraph.appendChild(cancelButton);
			}
		}

		document.body.appendChild(container);
		if (closeButton) {
			window.ROBROY.activeElement = document.activeElement;
			closeButton.focus();
		}
	}

	static keydownListener(e) {
		if (e.key === 'Escape') {
			RobroyModal.hide();
			document.removeEventListener('keydown', RobroyModal.keydownListener);
		}
	}

	static hide(e) {
		let target;
		if (e && e.target) {
			target = e.target;
		} else {
			target = document.querySelector('[data-robroy-modal-close]');
		}

		const container = document.getElementById(target.getAttribute('data-id'));
		container.parentNode.removeChild(container);

		if (window.ROBROY.activeElement) {
			window.ROBROY.activeElement.focus();
			window.ROBROY.activeElement = null;
		}
	}
}


/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroySpinner)
/* harmony export */ });
class RobroySpinner {
	static show() {
		var elem = document.querySelector('.robroy-spinner');
		if (!elem) {
			elem = document.createElement('div');
			elem.setAttribute('class', 'robroy-spinner');
			document.body.appendChild(elem);
		}
		elem.style.display = '';
	}

	static hide() {
		document.querySelector('.robroy-spinner').style.display = 'none';
	}
}


/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyAuth)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _folder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);







class RobroyAuth {
	static init() {
		if (!window.ROBROY.auth) {
			return;
		}
		window.ROBROY.auth.addEventListener('click', () => { RobroyAuth.authenticate(); });
		RobroyAuth.handleAuthentication();
	}

	static authenticate() {
		if (_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].isLoggedIn()) {
			RobroyAuth.logout();
		} else {
			RobroyAuth.login();
		}
	}

	static logout() {
		if (window.navigator.userAgent.indexOf('Safari') > -1) {
			// Safari shows the login screen again if we try to make an invalid request.
			window.localStorage.clear();
			RobroyAuth.handleLogout();
			return;
		}

		var url = [
			window.location.protocol,
			'//log:out@',
			window.location.host,
			window.ROBROY.args.apiPath + '?type=sessions',
		].join('');
		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'DELETE',
			url: url,
			noParse: true,
			callback: () => {
				window.localStorage.clear();
				RobroyAuth.handleLogout();
			},
		});
	}

	static login() {
		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'POST',
			url: window.ROBROY.args.apiPath + '?type=sessions',
			noParse: true,
			callback: (_response, status) => {
				if (status !== 204) {
					_modal__WEBPACK_IMPORTED_MODULE_4__["default"].show('Error: Invalid username or password.');
					return;
				}
				window.localStorage.setItem('authenticated', true);
				this.handleLogin();
			},
		});
	}

	static handleAuthentication() {
		if (_utilities__WEBPACK_IMPORTED_MODULE_5__["default"].isLoggedIn()) {
			RobroyAuth.handleLogin();
		} else {
			RobroyAuth.handleLogout();
		}
	}

	static handleLogin() {
		window.ROBROY.auth.innerText = 'Log Out';

		var images = _empty__WEBPACK_IMPORTED_MODULE_1__["default"].getImages();
		images.forEach((container) => {
			_image__WEBPACK_IMPORTED_MODULE_3__["default"].addEditControls(container);
		});

		_image__WEBPACK_IMPORTED_MODULE_3__["default"].addCreateControl();
		_folder__WEBPACK_IMPORTED_MODULE_2__["default"].addCreateControl();

		if (window.ROBROY.currentFolderId) {
			_folder__WEBPACK_IMPORTED_MODULE_2__["default"].addEditControls();
		}

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			url: window.ROBROY.args.apiPath + '?type=folders',
			callback: (response) => {
				window.ROBROY.folders = response.data;

				var $parentInput = document.getElementById('robroy-create-folder-parent');
				if ($parentInput) {
					_folder__WEBPACK_IMPORTED_MODULE_2__["default"].addFolderOptions('create', $parentInput);
				}

				$parentInput = document.getElementById('robroy-edit-folder-parent');
				if ($parentInput) {
					_folder__WEBPACK_IMPORTED_MODULE_2__["default"].addFolderOptions('edit', $parentInput);
				}
			},
		});
	}

	static handleLogout() {
		window.ROBROY.auth.innerText = 'Log In';

		var elems = document.querySelectorAll('.robroy-admin');
		elems.forEach((elem) => {
			elem.parentNode.removeChild(elem);
		});
	}
}


/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyEmpty)
/* harmony export */ });
class RobroyEmpty {
	static isEmpty() {
		const imageListStyle = window.getComputedStyle(window.ROBROY.elements.imageList);
		const folderListStyle = window.getComputedStyle(window.ROBROY.elements.folderList);
		return imageListStyle.display === 'none' && folderListStyle.display === 'none';
	}

	static getImages() {
		return document.querySelectorAll('#robroy-images > figure');
	}

	static getFolders() {
		return document.querySelectorAll('#robroy-folders > li');
	}

	static hasImages() {
		return RobroyEmpty.getImages().length > 0;
	}

	static hasFolders() {
		return RobroyEmpty.getFolders().length > 0;
	}
}


/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyFolder)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);





class RobroyFolder {
	static element(folder) {
		var container = document.createElement('li');
		container.setAttribute('class', 'robroy-folder');
		container.setAttribute('data-path', folder.id);
		container.setAttribute('data-name', folder.attributes.name);

		var a = document.createElement('a');
		a.setAttribute('class', 'robroy-folder-link');
		a.setAttribute('href', '?folder=' + folder.id);
		a.innerText = folder.attributes.name;
		container.appendChild(a);

		return container;
	}

	static addEditControls() {
		var div = document.createElement('div');
		div.setAttribute('class', 'robroy-admin robroy-form robroy-form-container');

		var form = RobroyFolder.form('Edit', 'edit', 'put', RobroyFolder.edit);
		form.setAttribute('class', 'robroy-form robroy-form--folder');
		div.appendChild(form);

		var button = document.createElement('button');
		button.setAttribute('class', 'robroy-button robroy-button--danger robroy-form--delete');
		button.setAttribute('id', 'robroy-delete-folder');
		button.setAttribute('type', 'button');
		button.innerText = 'Delete Folder';
		if (!_empty__WEBPACK_IMPORTED_MODULE_1__["default"].isEmpty()) {
			button.style.display = 'none';
		}
		button.addEventListener('click', RobroyFolder.delete);
		div.appendChild(button);

		window.ROBROY.container.prepend(div);
	}

	static addCreateControl() {
		var form = RobroyFolder.form('Create', 'create', 'post', RobroyFolder.create);
		form.setAttribute('class', 'robroy-admin robroy-form robroy-form--folder robroy-form-container');
		window.ROBROY.container.prepend(form);
	}

	static form(title, type, method, callback) {
		var form = document.createElement('form');
		form.setAttribute('action', window.ROBROY.args.apiPath + '?type=folders');
		form.setAttribute('id', 'robroy-' + type + '-folder-form');
		form.setAttribute('method', method);
		form.addEventListener('submit', callback);

		var heading = document.createElement('h2');
		heading.setAttribute('class', 'robroy-heading');
		heading.innerText = title + ' Folder';
		form.appendChild(heading);

		var inputLabel = document.createElement('label');
		inputLabel.setAttribute('class', 'robroy-label');
		inputLabel.setAttribute('for', 'robroy-' + type + '-folder-name');
		inputLabel.innerText = 'Name:';
		form.appendChild(inputLabel);

		var nameInput = document.createElement('input');
		nameInput.setAttribute('class', 'robroy-input');
		nameInput.setAttribute('id', 'robroy-' + type + '-folder-name');
		nameInput.setAttribute('name', 'name');
		nameInput.setAttribute('type', 'text');
		form.appendChild(nameInput);
		if (type === 'edit') {
			nameInput.setAttribute('value', window.ROBROY.currentFolder.attributes.name);
		}

		var selectLabel = document.createElement('label');
		selectLabel.setAttribute('class', 'robroy-label');
		selectLabel.setAttribute('for', 'robroy-' + type + '-folder-parent');
		selectLabel.innerText = 'Parent:';
		form.appendChild(selectLabel);

		var parentInput = document.createElement('select');
		parentInput.setAttribute('class', 'robroy-select');
		parentInput.setAttribute('id', 'robroy-' + type + '-folder-parent');
		parentInput.setAttribute('name', 'parent');
		form.appendChild(parentInput);
		RobroyFolder.addFolderOptions(type, parentInput);

		var button = document.createElement('button');
		button.setAttribute('class', 'robroy-button');
		button.setAttribute('id', 'robroy-' + type + '-submit');
		button.setAttribute('type', 'submit');
		button.innerText = title;
		form.appendChild(button);

		return form;
	}

	static addFolderOptions(type, select) {
		select.innerText = '';

		var option = document.createElement('option');
		option.setAttribute('value', '');
		select.appendChild(option);

		window.ROBROY.folders.forEach(function (folder) {
			option = document.createElement('option');
			option.setAttribute('value', folder.id);
			option.innerText = RobroyFolder.getFullName(folder);
			if (type === 'create') {
				if (folder.id === window.ROBROY.currentFolderId) {
					option.setAttribute('selected', 'selected');
				}
			} else if (type === 'edit') {
				if (window.ROBROY.currentFolder.relationships.parent && folder.id === window.ROBROY.currentFolder.relationships.parent.id) {
					option.setAttribute('selected', 'selected');
				}
			}
			select.appendChild(option);
		});
	}

	static delete() {
		var id = window.ROBROY.currentFolderId;
		_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show(
			'Are you sure you want to delete the folder "' + id + '"?',
			{
				closeButtonText: 'Delete',
				closeButtonClass: 'robroy-button--danger',
				showCancel: true,
				callback: () => {
					RobroyFolder.deleteCallback(id);
					_modal__WEBPACK_IMPORTED_MODULE_2__["default"].hide();
				},
			},
		);
	}

	static deleteCallback(id) {
		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'DELETE',
			url: window.ROBROY.args.apiPath + '?type=folders&id=' + id,
			callback: () => {
				_utilities__WEBPACK_IMPORTED_MODULE_3__["default"].callback('afterDeleteFolder');

				window.location = window.location.href.replace(
					'?folder=' + window.ROBROY.currentFolderId,
					window.ROBROY.currentFolder.relationships.parent ? '?folder=' + window.ROBROY.currentFolder.relationships.parent.id : '',
				);
			},
		});
	}

	static create(e) {
		e.preventDefault();
		var name = document.getElementById('robroy-create-folder-name');
		if (!name.value) {
			_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show('Error: Please enter a name.');
			return;
		}

		var form = document.getElementById('robroy-create-folder-form');
		var formData = new FormData(form);

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: form.getAttribute('method'),
			url: form.getAttribute('action'),
			formData: formData,
			callback: (response) => {
				RobroyFolder.createCallback(response);
			},
		});
	}

	static createCallback(response) {
		if (
			(response.data.relationships.parent && response.data.relationships.parent.id === window.ROBROY.currentFolderId)
			|| (!response.data.relationships.parent && !window.ROBROY.currentFolderId)
		) {
			RobroyFolder.prependItems([response.data]);

			var $deleteFolder = document.getElementById('robroy-delete-folder');
			if ($deleteFolder) {
				$deleteFolder.style.display = 'none';
			}
		}

		document.getElementById('robroy-create-folder-name').value = '';

		_utilities__WEBPACK_IMPORTED_MODULE_3__["default"].callback('afterCreateFolder');
	}

	static edit(e) {
		e.preventDefault();
		var name = document.getElementById('robroy-edit-folder-name');
		if (!name.value) {
			_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show('Error: Please enter a name.');
			return;
		}

		var parent = document.getElementById('robroy-edit-folder-parent');
		var hasNameChanged = name.value !== window.ROBROY.currentFolder.attributes.name;
		var hasParentChanged;
		if (window.ROBROY.currentFolder.relationships.parent) {
			hasParentChanged = parent.value !== window.ROBROY.currentFolder.relationships.parent.id;
		} else {
			hasParentChanged = !!parent.value;
		}
		if (!hasNameChanged && !hasParentChanged) {
			_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show('Nothing to update.');
			return;
		}

		var form = document.getElementById('robroy-edit-folder-form');
		var formData = new FormData(form);
		var json = {};
		formData.forEach((value, key) => {
			json[key] = value;
		});
		json = JSON.stringify(json);

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: form.getAttribute('method'),
			url: form.getAttribute('action') + '&id=' + window.ROBROY.currentFolderId,
			json: json,
			callback: (response) => {
				RobroyFolder.editCallback(response);
			},
		});
	}

	static editCallback(response) {
		_utilities__WEBPACK_IMPORTED_MODULE_3__["default"].callback('afterEditFolder');

		window.location = window.location.href.replace(
			'?folder=' + window.ROBROY.currentFolderId,
			'?folder=' + response.data.id,
		);
	}

	static prependItems(items) {
		items.forEach((item) => {
			window.ROBROY.elements.folderList.prepend(RobroyFolder.element(item));
		});
	}

	static getFullName(folder) {
		const output = [folder.attributes.name];
		while (folder.relationships.parent) {
			folder = folder.relationships.parent;
			output.push(folder.attributes.name);
		}
		return output.reverse().join(' > ');
	}
}


/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyImage)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _folder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);






class RobroyImage {
	static element(image) {
		var container = document.createElement('figure');
		container.setAttribute('class', 'robroy-figure');
		container.setAttribute('data-path', image.id);
		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addAttributes('figure', container);

		var a = document.createElement('a');
		a.setAttribute('class', 'robroy-link');
		a.setAttribute('href', image.attributes.url);
		a.style.backgroundImage = 'url("' + image.attributes.thumbnail + '")';
		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addAttributes('a', a);
		container.appendChild(a);

		var img = document.createElement('img');
		img.setAttribute('class', 'robroy-img');
		img.setAttribute('src', image.attributes.thumbnail);
		img.setAttribute('height', image.attributes.thumbnailHeight);
		img.setAttribute('width', image.attributes.thumbnailWidth);
		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addAttributes('img', img);
		a.appendChild(img);

		if (_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].isLoggedIn()) {
			RobroyImage.addEditControls(container);
		}

		return container;
	}

	static addEditControls(container) {
		var button = document.createElement('button');
		button.setAttribute('class', 'robroy-admin robroy-button robroy-button--danger');
		button.setAttribute('type', 'button');
		button.innerText = 'Delete';
		button.addEventListener('click', RobroyImage.delete);
		container.appendChild(button);

		var editButton = document.createElement('button');
		editButton.setAttribute('class', 'robroy-admin robroy-button robroy-button--secondary');
		editButton.setAttribute('type', 'button');
		editButton.innerText = 'Edit';
		editButton.addEventListener('click', RobroyImage.edit);
		container.appendChild(editButton);
	}

	static addCreateControl() {
		var form = document.createElement('form');
		form.setAttribute('action', window.ROBROY.args.apiPath + '?type=images');
		form.setAttribute('class', 'robroy-admin robroy-form robroy-form--image robroy-form-container');
		form.setAttribute('enctype', 'multipart/form-data');
		form.setAttribute('id', 'robroy-create-image-form');
		form.setAttribute('method', 'post');
		form.addEventListener('submit', RobroyImage.create);

		var div = document.createElement('div');
		div.setAttribute('id', 'robroy-create-image-container');
		form.appendChild(div);

		var input = document.createElement('input');
		input.setAttribute('accept', 'image/*');
		input.setAttribute('id', 'robroy-create-image-input');
		input.setAttribute('name', 'upload[]');
		input.setAttribute('multiple', 'multiple');
		input.setAttribute('title', 'Select images to upload');
		input.setAttribute('type', 'file');
		input.addEventListener('change', RobroyImage.onChange);
		div.appendChild(input);

		var text = document.createElement('div');
		text.setAttribute('id', 'robroy-create-image-text');
		text.innerText = 'Drag images or click here to upload.';
		div.appendChild(text);

		var button = document.createElement('button');
		button.setAttribute('class', 'robroy-button');
		button.setAttribute('id', 'robroy-create-image-button');
		button.setAttribute('type', 'submit');
		button.innerText = 'Upload';
		form.appendChild(button);

		var parent = document.createElement('input');
		parent.setAttribute('name', 'folder');
		parent.setAttribute('value', window.ROBROY.currentFolderId);
		parent.setAttribute('type', 'hidden');
		form.appendChild(parent);

		window.ROBROY.container.prepend(form);
	}

	static delete(e) {
		var path = e.target.parentNode.getAttribute('data-path');
		_modal__WEBPACK_IMPORTED_MODULE_3__["default"].show(
			'Are you sure you want to delete "' + path + '"?',
			{
				closeButtonText: 'Delete',
				closeButtonClass: 'robroy-button--danger',
				showCancel: true,
				callback: () => {
					RobroyImage.deleteCallback(path);
					_modal__WEBPACK_IMPORTED_MODULE_3__["default"].hide();
				},
			},
		);
	}

	static deleteCallback(path) {
		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: 'DELETE',
			url: window.ROBROY.args.apiPath + '?type=images&path=' + path,
			callback: () => {
				RobroyImage.removeImageFromList(path);
				_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterDeleteImage');
			},
		});
	}

	static removeImageFromList(path) {
		var container = document.querySelector('[data-path="' + path + '"]');
		var nextLink;
		if (container.nextSibling) {
			nextLink = [...container.nextSibling.children].find((child) => child.tagName === 'A');
		}
		container.parentNode.removeChild(container);

		window.ROBROY.currentNumImages -= 1;
		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].setNumImages();

		if (_empty__WEBPACK_IMPORTED_MODULE_1__["default"].hasImages()) {
			window.ROBROY.grid.resizeAllItems();
			if (nextLink) {
				nextLink.focus();
			}
		} else if (!_empty__WEBPACK_IMPORTED_MODULE_1__["default"].hasFolders()) {
			var $deleteFolder = document.getElementById('robroy-delete-folder');
			if ($deleteFolder) {
				$deleteFolder.style.display = '';
			}
		}
	}

	static onChange(e) {
		var files = [...e.target.files];
		var filenames = files.map((file) => file.name);

		document.getElementById('robroy-create-image-text').innerText = filenames.join(', ');
		document.getElementById('robroy-create-image-button').style.display = 'flex';
	}

	static create(e) {
		e.preventDefault();
		var files = document.getElementById('robroy-create-image-input').files;
		if (files.length <= 0) {
			_modal__WEBPACK_IMPORTED_MODULE_3__["default"].show('Error: No files selected.');
			return;
		}

		var form = document.getElementById('robroy-create-image-form');
		var formData = new FormData(form);

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: form.getAttribute('method'),
			url: form.getAttribute('action'),
			formData: formData,
			callback: (response) => {
				RobroyImage.createCallback(response);
			},
		});
	}

	static createCallback(response) {
		RobroyImage.prependItems(response.data);
		window.ROBROY.grid.resizeAllItems();

		response.data.forEach((image) => {
			window.ROBROY.currentImages[image.id] = image;
		});

		window.ROBROY.currentNumImages += response.data.length;
		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].setNumImages();

		document.getElementById('robroy-create-image-input').value = '';
		document.getElementById('robroy-create-image-text').innerText = 'Drag files or click here to upload.';
		document.getElementById('robroy-create-image-button').style.display = '';

		var $deleteFolder = document.getElementById('robroy-delete-folder');
		if ($deleteFolder) {
			$deleteFolder.style.display = 'none';
		}

		_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterCreateImage');
	}

	static edit(e) {
		var path = e.target.parentNode.getAttribute('data-path');
		window.ROBROY.currentImage = window.ROBROY.currentImages[path];

		var form = document.createElement('form');
		form.setAttribute('action', window.ROBROY.args.apiPath + '?type=images');
		form.setAttribute('id', 'robroy-edit-image-form');
		form.setAttribute('method', 'PUT');
		form.addEventListener('submit', RobroyImage.editCallback);

		var heading = document.createElement('h2');
		heading.setAttribute('class', 'robroy-heading');
		heading.innerText = 'Edit Image';
		form.appendChild(heading);

		var container = document.createElement('div');
		container.setAttribute('class', 'robroy-fields');
		form.appendChild(container);

		var filenameLabel = document.createElement('label');
		filenameLabel.setAttribute('class', 'robroy-label');
		filenameLabel.setAttribute('for', 'robroy-edit-image-filename');
		filenameLabel.innerText = 'Filename:';
		container.appendChild(filenameLabel);

		var filenameInput = document.createElement('input');
		filenameInput.setAttribute('class', 'robroy-input');
		filenameInput.setAttribute('id', 'robroy-edit-image-filename');
		filenameInput.setAttribute('name', 'filename');
		filenameInput.setAttribute('type', 'text');
		filenameInput.setAttribute('value', window.ROBROY.currentImage.attributes.filename);
		container.appendChild(filenameInput);

		var folderLabel = document.createElement('label');
		folderLabel.setAttribute('class', 'robroy-label');
		folderLabel.setAttribute('for', 'robroy-edit-image-folder');
		folderLabel.innerText = 'Folder:';
		container.appendChild(folderLabel);

		var folderInput = document.createElement('select');
		folderInput.setAttribute('class', 'robroy-select');
		folderInput.setAttribute('id', 'robroy-edit-image-folder');
		folderInput.setAttribute('name', 'folder');
		container.appendChild(folderInput);
		RobroyImage.addFolderOptions(folderInput);

		_modal__WEBPACK_IMPORTED_MODULE_3__["default"].show(
			form,
			{
				append: true,
				callback: RobroyImage.submitEditFormCallback,
				closeButtonAttributes: {
					id: 'robroy-edit-image-submit',
					form: 'robroy-edit-image-form',
					type: 'submit',
				},
				closeButtonText: 'Save',
				showCancel: true,
			},
		);
	}

	static submitEditFormCallback(e) {
		e.preventDefault();

		// Reset errors.
		const fields = document.querySelectorAll('#robroy-edit-image-form .robroy-has-error');
		fields.forEach((elem) => {
			elem.classList.remove('robroy-has-error');
		});
		const errors = document.querySelectorAll('#robroy-edit-image-form .robroy-error');
		errors.forEach((elem) => {
			elem.remove();
		});

		var filename = document.getElementById('robroy-edit-image-filename');
		if (!filename.value) {
			_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].addError(filename, 'Error: Please enter a filename.');
			return;
		}

		var folder = document.getElementById('robroy-edit-image-folder');
		var hasFilenameChanged = filename.value !== window.ROBROY.currentImage.attributes.filename;
		var hasFolderChanged = folder.value !== window.ROBROY.currentImage.attributes.folder;
		if (!hasFilenameChanged && !hasFolderChanged) {
			_modal__WEBPACK_IMPORTED_MODULE_3__["default"].hide(e);
			return;
		}

		var form = document.getElementById('robroy-edit-image-form');
		var formData = new FormData(form);
		var json = {};
		formData.forEach((value, key) => {
			json[key] = value;
		});
		json = JSON.stringify(json);

		_api__WEBPACK_IMPORTED_MODULE_0__["default"].request({
			method: form.getAttribute('method'),
			url: form.getAttribute('action') + '&id=' + window.ROBROY.currentImage.id,
			json: json,
			callback: (response) => {
				if (hasFolderChanged) {
					RobroyImage.removeImageFromList(window.ROBROY.currentImage.id);
				} else if (hasFilenameChanged) {
					RobroyImage.updateImage(window.ROBROY.currentImage.id, response.data);
				}

				delete window.ROBROY.currentImages[window.ROBROY.currentImage.id];
				window.ROBROY.currentImages[response.data.id] = response.data;
				window.ROBROY.currentImage = null;

				_modal__WEBPACK_IMPORTED_MODULE_3__["default"].hide(e);
				_utilities__WEBPACK_IMPORTED_MODULE_4__["default"].callback('afterEditImage');
			},
		});
	}

	static addFolderOptions(select) {
		select.innerText = '';

		var option = document.createElement('option');
		option.setAttribute('value', '');
		select.appendChild(option);

		window.ROBROY.folders.forEach(function (folder) {
			option = document.createElement('option');
			option.setAttribute('value', folder.id);
			option.innerText = _folder__WEBPACK_IMPORTED_MODULE_2__["default"].getFullName(folder);
			if (folder.id === window.ROBROY.currentImage.attributes.folder) {
				option.setAttribute('selected', 'selected');
			}
			select.appendChild(option);
		});
	}

	static updateImage(path, image) {
		const figure = document.querySelector('[data-path="' + path + '"]');
		figure.setAttribute('data-path', image.id);

		const a = figure.querySelector('.robroy-link');
		a.setAttribute('href', image.attributes.url);
	}

	static prependItems(items) {
		items.forEach((item) => {
			window.ROBROY.elements.imageList.prepend(RobroyImage.element(item));
		});
	}
}


/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RobroyBreadcrumb)
/* harmony export */ });
class RobroyBreadcrumb {
	static init() {
		const list = document.createElement('ul');
		list.setAttribute('class', 'robroy-breadcrumb');
		window.ROBROY.container.prepend(list);

		let folder = window.ROBROY.currentFolder;
		do {
			list.prepend(this.item(folder.id, folder.attributes.name));
			folder = folder.relationships.parent;
		} while (folder);

		list.prepend(this.item('', window.ROBROY.args.rootFolderName));
	}

	static item(id, name) {
		const item = document.createElement('li');
		item.setAttribute('class', 'robroy-breadcrumb-item');

		if (id === window.ROBROY.currentFolderId) {
			item.innerText = name;
		} else {
			const a = document.createElement('a');
			a.setAttribute('class', 'robroy-breadcrumb-link');
			a.setAttribute('href', id ? `?folder=${id}` : window.location.pathname);
			a.innerText = name;
			item.prepend(a);
		}

		return item;
	}
}


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Robroy)
/* harmony export */ });
/* harmony import */ var _grid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);




class Robroy {
	constructor(args) {
		args = args || {};
		args.allPagesLoaded = false;
		args.apiPath = args.apiPath || '/api.php';
		args.attributes = args.attributes || {};
		args.callbacks = args.callbacks || {};
		args.isLoadingImages = false;
		args.metaTitleSeparator = args.metaTitleSeparator || ' | ';
		args.pageNumber = 0;
		args.pageSize = args.pageSize || 8;
		args.rootFolderName = args.rootFolderName || 'Home';
		args.selector = args.selector || '#robroy';
		args.showAllImages = args.showAllImages || false;
		args.singularImageText = args.singularImageText || 'image';
		args.pluralImageText = args.pluralImageText || 'images';
		this.args = args;

		var container = document.querySelector(args.selector);
		if (!container) {
			return;
		}

		var header = document.createElement('div');
		header.setAttribute('id', 'robroy-folder-header');
		container.appendChild(header);

		var folderList = document.createElement('ul');
		folderList.setAttribute('id', 'robroy-folders');
		header.appendChild(folderList);

		var numImages = document.createElement('p');
		numImages.setAttribute('id', 'robroy-num');
		header.appendChild(numImages);

		var imageList = document.createElement('div');
		imageList.setAttribute('id', 'robroy-images');
		container.appendChild(imageList);

		var urlSearchParams = new URLSearchParams(window.location.search);
		var currentFolderId = urlSearchParams.get('folder');

		this.auth = document.querySelector('[data-action="authenticate"]');
		this.container = container;
		this.elements = {
			folderList,
			imageList,
			numImages,
		};
		this.currentFolderId = currentFolderId || '';
		this.currentFolder = null;
		this.currentImage = null;
		this.currentImages = {};
		this.currentNumImages = null;
		this.folders = [];
	}

	static init(args) {
		if (!_utilities__WEBPACK_IMPORTED_MODULE_2__["default"].propertyExists(window, 'ROBROY')) {
			window.ROBROY = new Robroy(args);
			if (!window.ROBROY.elements.imageList) {
				return null;
			}
			_list__WEBPACK_IMPORTED_MODULE_1__["default"].init();
			window.ROBROY.grid = new _grid__WEBPACK_IMPORTED_MODULE_0__["default"]();
		}
		return window.ROBROY;
	}
}

})();

Robroy = __webpack_exports__;
/******/ })()
;